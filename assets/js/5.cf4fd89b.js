(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{269:function(t,a,r){t.exports=r.p+"assets/img/insertion.6e67d1c7.gif"},293:function(t,a,r){"use strict";r.r(a);var s=r(20),n=Object(s.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 📘 插入排序")]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("插入排序是一种对于少量元素排序非常有效的排序算法，在日常生活中最常见的例子就是插入扑克牌，我们总是喜欢将某张扑克牌插入到已排序的扑克中。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(269),alt:"插入排序"}})]),t._v(" "),s("h2",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("p",[t._v("关于插入排序的使用可查看"),s("router-link",{attrs:{to:"/api/sort/#insertionSort"}},[t._v("API/排序/insertionSort")]),t._v("，插入排序的"),s("a",{attrs:{href:"https://github.com/ziyi2/algorithms/blob/dev/src/algorithms/sorting/insertionSort.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript实现"),s("OutboundLink")],1),t._v("如下：")],1),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" comparator "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../utils/comparator/_comparator'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @since: 2019-08-14 10:18:17\n * @description: 插入排序\n * @param: {Array} originalArray 需要排序的数组\n * @param: {Function(a: *, b: *)} customComparator 自定义比较方法\n * @returns: {Array} 返回一个新的排序后的数组\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("originalArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customComparator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("originalArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preIndex\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置自定义比较方法")]),t._v("\n  comparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCompare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customComparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    preIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前需要排序的元素（第一个元素默认已经排好序）")]),t._v("\n    currentElement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断前一个元素是否大于当前元素，如果是则前一个元素往后移")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直到不存在前一个元素或者前一个元素小于当前元素，则停止移动")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" comparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("greaterThan")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将当前排序元素插入到移动后的位置")]),t._v("\n    array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentElement\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#证明","aria-hidden":"true"}},[t._v("#")]),t._v(" 证明")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),s("p",[t._v("循环不变式：在"),s("code",[t._v("for")]),t._v("循环的每次迭代开始时，元素"),s("code",[t._v("array[0] ~ array[j-1]")]),t._v("始终是原数组的元素，且是一个排序好的子数组。以"),s("code",[t._v("[6,5,3,1,8,7,2,4]")]),t._v("为例，第一次循环默认"),s("code",[t._v("[6]")]),t._v("就是已经排序好的子数组，那么第二次循环"),s("code",[t._v("[5,6]")]),t._v("就是已经排序好的子数组，我们称这样的子数组为"),s("strong",[t._v("循环不变式")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[t._v("循环不变式")]),t._v("可以帮助理解算法的正确性。关于"),s("strong",[t._v("循环不变式")]),t._v("必须证明三条性质：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("初始化")]),t._v("：循环的第一次迭代之前，它为真。")]),t._v(" "),s("li",[s("strong",[t._v("保持")]),t._v("：循环的某次迭代之前它为真，那么下次迭代之前它仍然为真。")]),t._v(" "),s("li",[s("strong",[t._v("终止")]),t._v("：在循环终止时，不变式有助于证明算法的正确性。")])]),t._v(" "),s("p",[t._v("以"),s("code",[t._v("[6,5,3,1,8,7,2,4]")]),t._v("应用于插入排序证明该排序的正确性：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("初始化")]),t._v("：当"),s("code",[t._v("i = 1")]),t._v("时，"),s("strong",[t._v("循环不变式")]),t._v("为"),s("code",[t._v("array[0] ~ array[1-0]")]),t._v("，即第一次迭代之前的"),s("strong",[t._v("循环不变式")]),t._v("为原数组的"),s("code",[t._v("[6]")]),t._v("，在子数组只有一个元素的前提下，该元素默认可以归为已经排序好的元素，表明第一次迭代之前"),s("strong",[t._v("循环不变式")]),t._v("成立。")]),t._v(" "),s("li",[s("strong",[t._v("保持")]),t._v("：非形式化的插入第"),s("code",[t._v("i")]),t._v("个元素，将"),s("code",[t._v("array[i-1]")]),t._v("、"),s("code",[t._v("array[i-2]")]),t._v("、"),s("code",[t._v("array[i-3]")]),t._v("等向右移动一个位置，直到找到"),s("code",[t._v("array[i]")]),t._v("的合适位置进行插入操作。首先，移动后的"),s("code",[t._v("arrary[0] ~ array[i]")]),t._v("仍然是移动前的元素"),s("code",[t._v("array[0] ~ array[i]")]),t._v("，只是元素的位置发生了变化。其次，此前"),s("code",[t._v("array[0] ~ array[i-1]")]),t._v("是一个排序好的数组，那么"),s("code",[t._v("array[0] ~ array[i]")]),t._v("仍然是一个排序好的数组。因此，下一次循环迭代增加"),s("code",[t._v("i")]),s("strong",[t._v("循环不变式")]),t._v("仍然保持不变。")]),t._v(" "),s("li",[s("strong",[t._v("终止")]),t._v("：在循环终止时，由"),s("code",[t._v("i <= array.length - 1")]),t._v("可以确定终止条件为"),s("code",[t._v("i = array.length")]),t._v("，此时说明数组"),s("code",[t._v("array[0] ~ array [array.length-1]")]),t._v("是原来数组的所有元素，且已经按序排列，因此算法正确。")])]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("介绍"),s("strong",[t._v("插入排序")]),t._v("算法，证明该算法能正确的排序。")])])},[],!1,null,null,null);a.default=n.exports}}]);